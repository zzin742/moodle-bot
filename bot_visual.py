# -*- coding: utf-8 -*-
import sys
sys.stdout.reconfigure(encoding='utf-8')

import pyautogui
import time
import mss
import mss.tools
import webbrowser
from datetime import datetime
import os

# Desativa a pausa de seguran√ßa do pyautogui (use com cuidado)
pyautogui.FAILSAFE = False

# ===============================
# üìÅ CONFIGURA√á√ïES GLOBAIS
# ===============================
CONFIGURACOES = {
    "pastas": {
        "assets": "assets",
        "screenshots": "screenshots",
        "logs": "logs"
    },
    "moodle": {
        "url_login": "https://moodle.faat.edu.br/moodle/login/index.php",
        "timeout_login": 20
    },
    "materias": {
        "AnaliseProjeto": "https://moodle.faat.edu.br/moodle/course/view.php?id=6450",
        "Redes": "https://moodle.faat.edu.br/moodle/course/view.php?id=6545",
        "EngenhariaSoftware": "https://moodle.faat.edu.br/moodle/course/view.php?id=6546",
        "IOT": "https://moodle.faat.edu.br/moodle/course/view.php?id=6547",
        "Programacao": "https://moodle.faat.edu.br/moodle/course/view.php?id=6451"
    },
    "automacao": {
        "confianca_imagem": 0.7,
        "confianca_trabalho_final": 0.55,
        "rolagem_por_scroll": -500,
        "tempo_espera_rolagem": 0.4,
        "tempo_espera_abertura_pagina": 5,
        "timeout_esperar_imagem": 10
    },
    "imagens": {
        "botao_acessar": "botao_acessar.png",
        "trabalho_final": "trabalho_final.png",
        "pendente": "pendente.png"
    }
}

# Dicion√°rio para armazenar o status de cada mat√©ria
status_materias = {}

# ===============================
# üõ†Ô∏è FUN√á√ïES DE APOIO E CONFIGURA√á√ÉO
# ===============================

def obter_caminho_completo(nome_pasta, nome_arquivo=""):
    """Retorna o caminho completo para uma pasta ou arquivo dentro dela."""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(base_dir, nome_pasta, nome_arquivo)

def criar_pastas_necessarias():
    """Cria as pastas 'assets', 'screenshots' e 'logs' se n√£o existirem."""
    print("üîß Verificando e criando pastas necess√°rias...")
    for pasta in CONFIGURACOES["pastas"].values():
        caminho_pasta = obter_caminho_completo(pasta)
        if not os.path.exists(caminho_pasta):
            os.makedirs(caminho_pasta)
            print(f"   üìÅ Pasta '{caminho_pasta}' criada.")
    print("‚úÖ Pastas verificadas.\n")

def captura_tela(nome_arquivo="debug.png"):
    """Captura a tela inteira do monitor principal e salva como PNG."""
    try:
        with mss.mss() as sct:
            monitor = sct.monitors[1]
            sct_img = sct.grab(monitor)
            mss.tools.to_png(sct_img.rgb, sct_img.size, output=nome_arquivo)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao capturar a tela: {e}")

def rolar_pagina(total_scrolls=25):
    """Desce a p√°gina lentamente usando a rolagem do mouse."""
    print(f"üìú Rolando a p√°gina {total_scrolls} vezes para carregar todo o conte√∫do...")
    for i in range(total_scrolls):
        pyautogui.scroll(CONFIGURACOES["automacao"]["rolagem_por_scroll"])
        time.sleep(CONFIGURACOES["automacao"]["tempo_espera_rolagem"])
    print("‚úÖ Rolagem conclu√≠da.")

def esperar_imagem(caminho_imagem, timeout=10, confianca=0.8):
    """Espera uma imagem aparecer na tela por um determinado tempo."""
    print(f"üëÄ Aguardando a imagem '{os.path.basename(caminho_imagem)}' aparecer (timeout: {timeout}s)...")
    tempo_inicio = time.time()
    while time.time() - tempo_inicio < timeout:
        try:
            posicao = pyautogui.locateOnScreen(caminho_imagem, confidence=confianca, grayscale=True)
            if posicao:
                print(f"   ‚úÖ Imagem '{os.path.basename(caminho_imagem)}' encontrada!")
                return posicao
        except pyautogui.ImageNotFoundException:
            pass
        time.sleep(0.5)
    print(f"   ‚ùå Imagem '{os.path.basename(caminho_imagem)}' N√ÉO encontrada ap√≥s {timeout}s.")
    return None

# ===============================
# üéØ L√ìGICA PRINCIPAL DO BOT
# ===============================

def fazer_login_moodle():
    """Abre o Moodle, espera a tela de login e clica no bot√£o de acessar."""
    print("üåê Abrindo o Moodle no navegador...")
    webbrowser.open(CONFIGURACOES["moodle"]["url_login"])
    
    caminho_botao = obter_caminho_completo(CONFIGURACOES["pastas"]["assets"], CONFIGURACOES["imagens"]["botao_acessar"])
    botao_acessar = esperar_imagem(caminho_botao, timeout=CONFIGURACOES["moodle"]["timeout_login"], confianca=0.6)

    if botao_acessar:
        pyautogui.click(pyautogui.center(botao_acessar))
        print("üöÄ Bot√£o 'Acessar' clicado. Login em andamento...")
        time.sleep(CONFIGURACOES["automacao"]["tempo_espera_abertura_pagina"])
        return True
    else:
        print("‚ö†Ô∏è Bot√£o 'Acessar' n√£o encontrado. Verifique se j√° est√° logado ou se a p√°gina carregou.")
        return False

def verificar_pendencia_na_materia(nome_materia):
    """
    Entra na p√°gina da mat√©ria, rola a tela e procura por trabalhos pendentes.
    Retorna um dicion√°rio com o status detalhado da mat√©ria.
    """
    print(f"\nüìò Verificando a mat√©ria: {nome_materia}")
    url_materia = CONFIGURACOES["materias"][nome_materia]
    webbrowser.open(url_materia)
    time.sleep(CONFIGURACOES["automacao"]["tempo_espera_abertura_pagina"])

    rolar_pagina()
    
    caminho_screenshot = obter_caminho_completo(CONFIGURACOES["pastas"]["screenshots"], f"tela_{nome_materia}.png")
    captura_tela(caminho_screenshot)

    status_materia = {
        "nome": nome_materia,
        "trabalho_encontrado": False,
        "pendente": False,
        "observacao": ""
    }

    try:
        caminho_trabalho = obter_caminho_completo(CONFIGURACOES["pastas"]["assets"], CONFIGURACOES["imagens"]["trabalho_final"])
        trabalho_posicao = pyautogui.locateOnScreen(caminho_trabalho, confidence=CONFIGURACOES["automacao"]["confianca_trabalho_final"], grayscale=True)
    except pyautogui.ImageNotFoundException:
        print(f"   ‚ö†Ô∏è Imagem 'trabalho_final.png' n√£o foi encontrada na tela de {nome_materia}.")
        trabalho_posicao = None
        status_materia["observacao"] = "Trabalho final n√£o encontrado"

    if trabalho_posicao:
        print("   üìò 'Trabalho Final' encontrado. Verificando status...")
        status_materia["trabalho_encontrado"] = True
        
        regiao_para_procurar = (
            trabalho_posicao.left + trabalho_posicao.width,
            trabalho_posicao.top - 20,
            300,
            trabalho_posicao.height + 40
        )
        
        try:
            caminho_pendente = obter_caminho_completo(CONFIGURACOES["pastas"]["assets"], CONFIGURACOES["imagens"]["pendente"])
            pendente_posicao = pyautogui.locateOnScreen(caminho_pendente, region=regiao_para_procurar, confidence=CONFIGURACOES["automacao"]["confianca_imagem"], grayscale=True)
        except pyautogui.ImageNotFoundException:
            print("   üü£ Status 'Pendente' n√£o encontrado pr√≥ximo ao trabalho.")
            pendente_posicao = None

        if pendente_posicao:
            print("   üü¢ Status 'Pendente' encontrado!")
            status_materia["pendente"] = True
            caminho_screenshot_pendente = obter_caminho_completo(CONFIGURACOES["pastas"]["screenshots"], f"pendente_{nome_materia}.png")
            captura_tela(caminho_screenshot_pendente)
            print(f"   üì∏ Screenshot da pend√™ncia salvo em '{caminho_screenshot_pendente}'")
            status_materia["observacao"] = "Trabalho final com status PENDENTE"
        else:
            print("   üü£ Trabalho encontrado, mas o status N√ÉO √© 'Pendente'.")
            status_materia["observacao"] = "Trabalho final encontrado, mas sem pend√™ncia"
    else:
        print(f"   ‚úÖ Nenhum 'Trabalho Final' encontrado para {nome_materia}.")
        status_materia["observacao"] = "Nenhum trabalho final encontrado"

    return status_materia

def voltar_pagina_inicial():
    """Volta para a p√°gina anterior usando o atalho do navegador."""
    print("‚Ü©Ô∏è Voltando para a p√°gina anterior...")
    pyautogui.hotkey('alt', 'left')
    time.sleep(3)

def gerar_relatorio_final():
    """Gera e salva o relat√≥rio final das pend√™ncias no console e em um arquivo."""
    print("\n" + "="*50)
    print("üìä RELAT√ìRIO FINAL DE PEND√äNCIAS")
    print("="*50)
    
    data_hora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    
    # Coletar mat√©rias com pend√™ncias
    materias_com_pendencia = [materia for materia, status in status_materias.items() if status["pendente"]]
    materias_sem_trabalho = [materia for materia, status in status_materias.items() if not status["trabalho_encontrado"]]
    materias_em_dia = [materia for materia, status in status_materias.items() if status["trabalho_encontrado"] and not status["pendente"]]

    # Relat√≥rio no console
    print(f"üìÖ Relat√≥rio gerado em: {data_hora}")
    print(f"üìö Total de mat√©rias verificadas: {len(status_materias)}")
    print(f"‚ö†Ô∏è  Mat√©rias com pend√™ncias: {len(materias_com_pendencia)}")
    print(f"‚úÖ Mat√©rias em dia: {len(materias_em_dia)}")
    print(f"üîç Mat√©rias sem trabalho final: {len(materias_sem_trabalho)}")
    
    if materias_com_pendencia:
        print("\n‚ùå MAT√âRIAS COM PEND√äNCIAS:")
        for materia in materias_com_pendencia:
            print(f"   üî∏ {materia} - {status_materias[materia]['observacao']}")
    
    if materias_em_dia:
        print("\n‚úÖ MAT√âRIAS EM DIA:")
        for materia in materias_em_dia:
            print(f"   üü¢ {materia} - {status_materias[materia]['observacao']}")
    
    if materias_sem_trabalho:
        print("\nüîç MAT√âRIAS SEM TRABALHO FINAL:")
        for materia in materias_sem_trabalho:
            print(f"   üîé {materia} - {status_materias[materia]['observacao']}")

    print(f"\nüì∑ Prints das telas salvas na pasta 'screenshots'.")

    # Relat√≥rio em arquivo
    relatorio_texto = "="*50 + "\n"
    relatorio_texto += "RELAT√ìRIO DE PEND√äNCIAS - BOT MOODLE\n"
    relatorio_texto += "="*50 + "\n"
    relatorio_texto += f"Data e hora: {data_hora}\n"
    relatorio_texto += f"Total de mat√©rias verificadas: {len(status_materias)}\n"
    relatorio_texto += f"Mat√©rias com pend√™ncias: {len(materias_com_pendencia)}\n"
    relatorio_texto += f"Mat√©rias em dia: {len(materias_em_dia)}\n"
    relatorio_texto += f"Mat√©rias sem trabalho final: {len(materias_sem_trabalho)}\n\n"
    
    if materias_com_pendencia:
        relatorio_texto += "MAT√âRIAS COM PEND√äNCIAS:\n"
        for materia in materias_com_pendencia:
            relatorio_texto += f"‚ùå {materia} - {status_materias[materia]['observacao']}\n"
        relatorio_texto += "\n"
    
    if materias_em_dia:
        relatorio_texto += "MAT√âRIAS EM DIA:\n"
        for materia in materias_em_dia:
            relatorio_texto += f"‚úÖ {materia} - {status_materias[materia]['observacao']}\n"
        relatorio_texto += "\n"
    
    if materias_sem_trabalho:
        relatorio_texto += "MAT√âRIAS SEM TRABALHO FINAL:\n"
        for materia in materias_sem_trabalho:
            relatorio_texto += f"üîç {materia} - {status_materias[materia]['observacao']}\n"
    
    relatorio_texto += "\n" + "="*50 + "\n\n"

    caminho_log = obter_caminho_completo(CONFIGURACOES["pastas"]["logs"], f"relatorio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
    with open(caminho_log, "w", encoding="utf-8") as f:
        f.write(relatorio_texto)
    
    print(f"üìÅ Relat√≥rio salvo em: '{caminho_log}'")
    print("="*50)

# ===============================
# üöÄ EXECU√á√ÉO PRINCIPAL DO SCRIPT
# ===============================

if __name__ == "__main__":
    try:
        print("üß† Iniciando o bot do Moodle ‚Äî vers√£o com relat√≥rio detalhado üöÄ\n")
        
        criar_pastas_necessarias()
        
        fazer_login_moodle()
        
        # Loop principal para verificar cada mat√©ria
        for nome_materia in CONFIGURACOES["materias"].keys():
            status = verificar_pendencia_na_materia(nome_materia)
            status_materias[nome_materia] = status
            voltar_pagina_inicial()

        gerar_relatorio_final()
        
        print("\nüèÅ Bot finalizado com sucesso!")
    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro inesperado durante a execu√ß√£o do bot: {e}")
        print("üîç Tentando gerar um relat√≥rio parcial com as informa√ß√µes coletadas at√© o momento...")
        try:
            gerar_relatorio_final()
        except Exception as e_rel:
            print(f"‚ùå N√£o foi poss√≠vel gerar o relat√≥rio: {e_rel}")
        print("üèÅ Bot finalizado com erros.")